<?php

/**
 * @file
 * Provides discussion forums.
 */

/**
 * Implements hook_theme().
 */
function forum_ng_theme() {
  return array(
    'forum_ngs' => array(
      'template' => 'forum_ngs',
      'variables' => array('forum_ngs' => NULL, 'topics' => NULL, 'parents' => NULL, 'tid' => NULL, 'sortby' => NULL, 'forum_ng_per_page' => NULL),
    ),
    'forum_ng_list' => array(
      'template' => 'forum_ng-list',
      'variables' => array('forum_ngs' => NULL, 'parents' => NULL, 'tid' => NULL),
    ),
    'forum_ng_topic_list' => array(
      'template' => 'forum_ng-topic-list',
      'variables' => array('tid' => NULL, 'topics' => NULL, 'sortby' => NULL, 'forum_ng_per_page' => NULL),
    ),
    'forum_ng_icon' => array(
      'template' => 'forum-ng-icon',
      'variables' => array('new_posts' => NULL, 'num_posts' => 0, 'comment_mode' => 0, 'sticky' => 0, 'first_new' => FALSE),
      'path' => backdrop_get_path('module', 'forum_ng') . '/templates',
    ),
    'forum_ng_submitted' => array(
      'template' => 'forum-ng-submitted',
      'variables' => array('topic' => NULL),
      'path' => backdrop_get_path('module', 'forum_ng') . '/templates',
    ),
    'forum_ng_form' => array(
      'render element' => 'form',
      'file' => 'forum_ng.admin.inc',
    ),
    'views_view_table__forum_ngs' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'views-view-table--forums',
      'base hook' => 'views_view_table',
      'path' => backdrop_get_path('module', 'forum_ng') . '/templates',
      'preprocess functions' => array(
        'forum_ng_preprocess_views_view__forum_ngs',
      ),
    ),
    'views_view_table__topic' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'views-view-table--topic',
      'base hook' => 'views_view_table',
      'path' => backdrop_get_path('module', 'forum_ng') . '/templates',
      'preprocess functions' => array(
        'forum_ng_preprocess_views_view__topic',
      ),
    ),
    'views_view_field__forum_ngs__description' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'views-view-field--forums--description',
      'base hook' => 'views_view_field',
      'path' => backdrop_get_path('module', 'forum_ng') . '/templates',
    ),
    'views_view_field__forum_ngs__name' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'views-view-field--forums--name',
      'base hook' => 'views_view_field',
      'path' => backdrop_get_path('module', 'forum_ng') . '/templates',
    ),
    'views_view_field__topic__title' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'views-view-field--topic--title',
      'base hook' => 'views_view_field',
      'path' => backdrop_get_path('module', 'forum_ng') . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function forum_ng_menu() {
  $items['admin/structure/forum_ng'] = array(
    'title' => 'Forum NG',
    'description' => 'Control Forum NG hierarchy settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('forum_ng_overview'),
    'access arguments' => array('administer forum_ngs'),
    'file' => 'forum_ng.admin.inc',
  );
  $items['admin/structure/forum_ng/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/forum_ng/add'] = array(
    'title' => 'Add forum',
    'page callback' => 'forum_ng_form_main',
    'page arguments' => array(3),
    'access arguments' => array('administer forum_ngs'),
    'type' => MENU_LOCAL_ACTION,
    'parent' => 'admin/structure/forum_ng',
    'file' => 'forum_ng.admin.inc',
  );
  $items['admin/structure/forum_ng/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('forum_ng_admin_settings'),
    'access arguments' => array('administer forum_ngs'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/structure/forum_ng',
    'file' => 'forum_ng.admin.inc',
  );
  $items['admin/structure/forum_ng/edit/%taxonomy_term'] = array(
    'title' => 'Edit forum',
    'page callback' => 'forum_ng_form_main',
    'page arguments' => array(4),
    'access arguments' => array('administer forum_ngs'),
    'file' => 'forum_ng.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function forum_ng_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

   // Add action link to 'node/add/forum_ng' on 'forum_ng' sub-pages.
  if ($root_path == 'forums' || $root_path == 'forums/%') {
    $tid = (isset($router_item['page_arguments'][2]) ? $router_item['page_arguments'][2] : 0);
    $forum_ng_term = forum_ng_forum_load($tid);
    if ($forum_ng_term) {
      $links = array();
      // Loop through all bundles for forum_ng taxonomy vocabulary field.
      $field = field_info_field('forum_ng_taxonomy');
      if (!empty($field['bundles']['node'])) {
        foreach ($field['bundles']['node'] as $type) {
          if (node_access('create', $type)) {
            $links[$type] = array(
              '#theme' => 'menu_local_action',
              '#link' => array(
                'title' => t('Add new @node_type', array('@node_type' => node_type_get_name($type))),
                'href' => 'node/add/' . str_replace('_', '-', $type) . '/' . $forum_ng_term->tid,
              ),
            );
          }
        }
      }
      if (empty($links)) {
        // Authenticated user does not have access to create new topics.
        if ($user->uid) {
          $links['disallowed'] = array(
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('You are not allowed to post new content in the forum_ng.'),
            ),
          );
        }
        // Anonymous user does not have access to create new topics.
        else {
          $links['login'] = array(
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('<a href="@login">Log in</a> to post new content in the forum_ng.', array(
                '@login' => url('user/login', array('query' => backdrop_get_destination())),
              )),
              'localized_options' => array('html' => TRUE),
            ),
          );
        }
      }
      $data['actions']['output'] = array_merge($data['actions']['output'], $links);
    }
  }
}


/**
 * Checks whether a node can be used in a forum_ng, based on its content type.
 *
 * @param $node
 *   A node object.
 *
 * @return
 *   Boolean indicating if the node can be assigned to a forum_ng.
 */
function _forum_ng_node_check_node_type($node) {
  // Fetch information about the forum_ng field.
  $field = field_info_instance('node', 'forum_ng_taxonomy', $node->type);

  return is_array($field);
}

/**
 * Implements hook_node_view().
 */
function forum_ng_node_view($node, $view_mode) {
  if (_forum_ng_node_check_node_type($node)) {
    if ($view_mode == 'full' && node_is_page($node)) {
      $vocabulary_name = config_get('forum_ng.settings', 'forum_ng_nav_vocabulary');
      $vocabulary = taxonomy_vocabulary_load($vocabulary_name);
      // Breadcrumb navigation
      $breadcrumb[] = l(t('Home'), NULL);
      $breadcrumb[] = l($vocabulary->name, 'forums');
      if ($parents = taxonomy_term_load_parents_all($node->forum_ng_tid)) {
        $parents = array_reverse($parents);
        foreach ($parents as $parent) {
          $breadcrumb[] = l($parent->name, 'forums/' . $parent->tid);
        }
      }
      backdrop_set_breadcrumb($breadcrumb);

    }
  }
}

/**
 * Implements hook_node_validate().
 *
 * Checks in particular that the node is assigned only a "leaf" term in the
 * forum_ng taxonomy.
 */
function forum_ng_node_validate($node, $form) {
  if (_forum_ng_node_check_node_type($node)) {
    $langcode = $form['forum_ng_taxonomy']['#language'];
    if (!empty($node->forum_ng_taxonomy[$langcode])) {
      foreach ($node->forum_ng_taxonomy[$langcode] as $delta => $item) {
        // If no term was selected (e.g. when no terms exist yet), remove the
        // item.
        if (empty($item['tid'])) {
          unset($node->forum_ng_taxonomy[$langcode][$delta]);
          continue;
        }
        $term = taxonomy_term_load($item['tid']);
        if (!$term) {
          form_set_error('forum_ng_taxonomy', t('Select a forum_ng.'));
          continue;
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Assigns the forum_ng taxonomy when adding a topic from within a forum_ng.
 */
function forum_ng_node_presave($node) {
  if (_forum_ng_node_check_node_type($node)) {
    // Make sure all fields are set properly:
    $node->icon = !empty($node->icon) ? $node->icon : '';
    reset($node->forum_ng_taxonomy);
    $langcode = key($node->forum_ng_taxonomy);
    if (!empty($node->forum_ng_taxonomy[$langcode])) {
      $node->forum_ng_tid = $node->forum_ng_taxonomy[$langcode][0]['tid'];
      if (isset($node->nid)) {
        $old_tid = db_query_range("SELECT f.tid FROM {forum_ng} f INNER JOIN {node} n ON f.vid = n.vid WHERE n.nid = :nid ORDER BY f.vid DESC", 0, 1, array(':nid' => $node->nid))->fetchField();
        if ($old_tid && isset($node->forum_ng_tid) && ($node->forum_ng_tid != $old_tid) && !empty($node->shadow)) {
          // A shadow copy needs to be created. Retain new term and add old term.
          $node->forum_ng_taxonomy[$langcode][] = array('tid' => $old_tid);
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function forum_ng_node_update($node) {
  if (_forum_ng_node_check_node_type($node)) {
    if (empty($node->revision) && db_query('SELECT tid FROM {forum_ng} WHERE nid=:nid', array(':nid' => $node->nid))->fetchField()) {
      if (!empty($node->forum_ng_tid)) {
        db_update('forum_ng')
          ->fields(array('tid' => $node->forum_ng_tid))
          ->condition('vid', $node->vid)
          ->execute();
      }
      // The node is removed from the forum_ng.
      else {
        db_delete('forum_ng')
          ->condition('nid', $node->nid)
          ->execute();
      }
    }
    else {
      if (!empty($node->forum_ng_tid)) {
        db_insert('forum_ng')
          ->fields(array(
            'tid' => $node->forum_ng_tid,
            'vid' => $node->vid,
            'nid' => $node->nid,
          ))
          ->execute();
      }
    }
    // If the node has a shadow forum_ng topic, update the record for this
    // revision.
    if (!empty($node->shadow)) {
      db_delete('forum_ng')
        ->condition('nid', $node->nid)
        ->condition('vid', $node->vid)
        ->execute();
      db_insert('forum_ng')
        ->fields(array(
          'nid' => $node->nid,
          'vid' => $node->vid,
          'tid' => $node->forum_ng_tid,
        ))
        ->execute();
     }
  }
}

/**
 * Implements hook_node_insert().
 */
function forum_ng_node_insert($node) {
  if (_forum_ng_node_check_node_type($node)) {
    if (!empty($node->forum_ng_tid)) {
      $nid = db_insert('forum_ng')
        ->fields(array(
          'tid' => $node->forum_ng_tid,
          'vid' => $node->vid,
          'nid' => $node->nid,
        ))
        ->execute();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function forum_ng_node_delete($node) {
  if (_forum_ng_node_check_node_type($node)) {
    db_delete('forum_ng')
      ->condition('nid', $node->nid)
      ->execute();
    db_delete('forum_index')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function forum_ng_node_load($nodes) {
  $node_vids = array();
  foreach ($nodes as $node) {
    if (_forum_ng_node_check_node_type($node)) {
      $node_vids[] = $node->vid;
    }
  }
  if (!empty($node_vids)) {
    $query = db_select('forum_ng', 'f');
    $query
      ->fields('f', array('nid', 'tid'))
      ->condition('f.vid', $node_vids);
    $result = $query->execute();
    foreach ($result as $record) {
      $nodes[$record->nid]->forum_ng_tid = $record->tid;
    }
  }
}

/**
 * Implements hook_node_info().
 */
function forum_ng_node_info() {
  return array(
    'forum_ng' => array(
      'name' => t('forum_ng topic'),
      'base' => 'forum_ng',
      'description' => t('A <em>forum_ng topic</em> starts a new discussion thread within a forum_ng.'),
      'title_label' => t('Subject'),
    )
  );
}

/**
 * Implements hook_permission().
 */
function forum_ng_permission() {
  $perms = array(
    'administer forum_ngs' => array(
      'title' => t('Administer forum_ngs'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_comment_publish().
 *
 * This actually handles the insertion and update of published nodes since
 * comment_save() calls hook_comment_publish() for all published comments.
 */
function forum_ng_comment_publish($comment) {
  _forum_ng_update_forum_index($comment->nid);
}

/**
 * Implements hook_comment_update().
 *
 * The Comment module doesn't call hook_comment_unpublish() when saving
 * individual comments, so we need to check for those here.
 */
function forum_ng_comment_update($comment) {
  // comment_save() calls hook_comment_publish() for all published comments,
  // so we need to handle all other values here.
  if (!$comment->status) {
    _forum_ng_update_forum_index($comment->nid);
  }
}

/**
 * Implements hook_comment_unpublish().
 */
function forum_ng_comment_unpublish($comment) {
  _forum_ng_update_forum_index($comment->nid);
}

/**
 * Implements hook_comment_delete().
 */
function forum_ng_comment_delete($comment) {
  _forum_ng_update_forum_index($comment->nid);
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function forum_ng_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  if ($entity_type == 'node' && $entity->status && _forum_ng_node_check_node_type($entity)) {
    $query = db_insert('forum_index')->fields(array('nid', 'title', 'tid', 'sticky', 'created', 'comment_count', 'last_comment_timestamp'));
    foreach ($entity->forum_ng_taxonomy as $language) {
      foreach ($language as $item) {
        $query->values(array(
          'nid' => $entity->nid,
          'title' => $entity->title,
          'tid' => $item['tid'],
          'sticky' => (int) $entity->sticky,
          'created' => $entity->created,
          'comment_count' => 0,
          'last_comment_timestamp' => $entity->created,
        ));
      }
    }
    $query->execute();
  }
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Modify the output of the rendered forum_ngs taxonomy term field on node display
 * to show a link to the forum_ng View instead of the default 'taxonomy/term/tid'.
 */
function forum_ng_field_attach_view_alter(&$output, $context) {
  $vocabulary_name = config_get('forum_ng.settings', 'forum_ng_nav_vocabulary');
  // Append RDF term mappings on displayed taxonomy links.
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element['#field_type'] == 'taxonomy_term_reference' && $element['#formatter'] == 'taxonomy_term_reference_link') {
      foreach ($element['#items'] as $delta => $item) {
        $term = $item['taxonomy_term'];
        if ($term->vocabulary == $vocabulary_name) {
          $element[$delta]['#href'] = 'forums/' . $term->tid;
        }
      }
    }
  }
}

/**
 * Implements hook_field_storage_pre_update().
 */
function forum_ng_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
  $first_call = &backdrop_static(__FUNCTION__, array());

  if ($entity_type == 'node' && _forum_ng_node_check_node_type($entity)) {

    // If the node is published, update the forum_ng index.
    if ($entity->status) {

      // We don't maintain data for old revisions, so clear all previous values
      // from the table. Since this hook runs once per field, per object, make
      // sure we only wipe values once.
      if (!isset($first_call[$entity->nid])) {
        $first_call[$entity->nid] = FALSE;
        db_delete('forum_index')->condition('nid', $entity->nid)->execute();
      }
      $query = db_insert('forum_index')->fields(array('nid', 'title', 'tid', 'sticky', 'created', 'comment_count', 'last_comment_timestamp'));
      foreach ($entity->forum_ng_taxonomy as $language) {
        foreach ($language as $item) {
          $query->values(array(
            'nid' => $entity->nid,
            'title' => $entity->title,
            'tid' => $item['tid'],
            'sticky' => $entity->sticky,
            'created' => $entity->created,
            'comment_count' => 0,
            'last_comment_timestamp' => $entity->created,
          ));
        }
      }
      $query->execute();
      // The logic for determining last_comment_count is fairly complex, so
      // call _forum_ng_update_forum_index() too.
      _forum_ng_update_forum_index($entity->nid);
    }

    // When a forum_ng node is unpublished, remove it from the forum_index table.
    else {
      db_delete('forum_index')->condition('nid', $entity->nid)->execute();
    }

  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary().
 */
function forum_ng_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {
   $vocabulary_name = config_get('forum_ng.settings', 'forum_ng_nav_vocabulary');
   if (isset($form['vocabulary']['#value']) && $form['vocabulary']['#value'] == $vocabulary_name) {
    $form['help_forum_ng_vocab'] = array(
      '#markup' => t('This is the designated forum_ng vocabulary. Some of the normal vocabulary options have been removed.'),
      '#weight' => -1,
    );
    // Forum NG's vocabulary always has single hierarchy. Forums have only one
    // parent or no parent for root items. By default this value is 0.
    $form['hierarchy']['#value'] = 1;
    // Do not allow to delete Forum NG's vocabulary.
    $form['actions']['delete']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 */
function forum_ng_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
   $vocabulary_name = config_get('forum_ng.settings', 'forum_ng_nav_vocabulary');
   if (isset($form['vocabulary']['#value']) && $form['vocabulary']['#value'] == $vocabulary_name) {
    // Hide multiple parents select from forum_ng terms.
    $form['relations']['parent']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function forum_ng_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['forum_ng_taxonomy'])) {
    $langcode = $form['forum_ng_taxonomy']['#language'];
    // Make the vocabulary required for 'real' forum_ng-nodes.
    $form['forum_ng_taxonomy'][$langcode]['#required'] = TRUE;
    $form['forum_ng_taxonomy'][$langcode]['#multiple'] = FALSE;
    if (empty($form['forum_ng_taxonomy'][$langcode]['#default_value'])) {
      // If there is no default forum_ng already selected, try to get the forum_ng
      // ID from the URL (e.g., if we are on a page like node/add/forum_ng/2, we
      // expect "2" to be the ID of the forum_ng that was requested).
      $requested_forum_ng_id = arg(3);
      $form['forum_ng_taxonomy'][$langcode]['#default_value'] = is_numeric($requested_forum_ng_id) ? $requested_forum_ng_id : '';
    }
  }
  if (isset($form['#node'])) {
    $node = $form['#node'];
    $type = node_type_get_type($node);
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#default_value' => !empty($node->title) ? $node->title : '',
      '#required' => TRUE,
      '#weight' => -5
    );

    if (!empty($node->nid)) {
      $forum_ng_terms = $node->forum_ng_taxonomy;
      // If editing, give option to leave shadows.
      $shadow = (count($forum_ng_terms) > 1);
      $form['shadow'] = array('#type' => 'checkbox', '#title' => t('Leave shadow copy'), '#default_value' => $shadow, '#description' => t('If you move this topic, you can leave a link in the old forum_ng to the new forum_ng.'));
      $form['forum_ng_tid'] = array(
        '#type' => 'value',
        '#value' => isset($node->forum_ng_tid) ? $node->forum_ng_tid : NULL,
      );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function forum_ng_block_info() {
  $blocks['active'] = array(
    'info' => t('Active forum topics'),
    'cache' => BACKDROP_CACHE_CUSTOM,
    'properties' => array('administrative' => TRUE),
  );
  $blocks['new'] = array(
    'info' => t('New forum topics'),
    'cache' => BACKDROP_CACHE_CUSTOM,
    'properties' => array('administrative' => TRUE),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function forum_ng_block_configure($delta = '') {
  $form['forum_ng_block_num_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Number of topics'),
    '#default_value' => config_get('forum_ng.settings', 'forum_ng_block_num_' . $delta),
    '#options' => backdrop_map_assoc(range(2, 20))
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function forum_ng_block_save($delta = '', $edit = array()) {
  config_set('forum_ng.settings', 'forum_ng_block_num_' . $delta, $edit['forum_ng_block_num_' . $delta]);
}

/**
 * Implements hook_block_view().
 *
 * Generates a block containing the currently active forum_ng topics and the most
 * recently added forum_ng topics.
 */
function forum_ng_block_view($delta = '') {
  $query = db_select('forum_index', 'f')
    ->fields('f')
    ->addTag('node_access');
  switch ($delta) {
    case 'active':
      $title = t('Active forum_ng topics');
      $query
        ->orderBy('f.last_comment_timestamp', 'DESC')
        ->range(0, config_get('forum_ng.settings', 'forum_ng_block_num_active'));
      break;

    case 'new':
      $title = t('New forum_ng topics');
      $query
        ->orderBy('f.created', 'DESC')
        ->range(0, config_get('forum_ng.settings', 'forum_ng_block_num_new'));
      break;
  }

  $block['subject'] = $title;
  // Cache based on the altered query. Enables us to cache with node access enabled.
  $block['content'] = backdrop_render_cache_by_query($query, 'forum_ng_block_view');
  $block['content']['#access'] = user_access('access content');
  return $block;
}

/**
 * Render API callback: Lists nodes based on the element's #query property.
 *
 * This function can be used as a #pre_render callback.
 *
 * @see forum_ng_block_view()
 */
function forum_ng_block_view_pre_render($elements) {
  $result = $elements['#query']->execute();
  if ($node_title_list = node_title_list($result)) {
    $elements['forum_ng_list'] = $node_title_list;
    $elements['forum_ng_more'] = array('#theme' => 'more_link', '#url' => 'forum_ng', '#title' => t('Read the latest forum_ng topics.'));
  }
  return $elements;
}

/**
 * Implements hook_form().
 */
function forum_ng_form($node, $form_state) {
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5
  );

  if (!empty($node->nid)) {
    $forum_ng_terms = $node->forum_ng_taxonomy;
    // If editing, give option to leave shadows.
    $shadow = (count($forum_ng_terms) > 1);
    $form['shadow'] = array('#type' => 'checkbox', '#title' => t('Leave shadow copy'), '#default_value' => $shadow, '#description' => t('If you move this topic, you can leave a link in the old forum_ng to the new forum_ng.'));
    $form['forum_ng_tid'] = array(
      '#type' => 'value',
      '#value' => isset($node->forum_ng_tid) ? $node->forum_ng_tid : NULL,
    );
  }

  return $form;
}

/**
 * Returns a tree of all forum_ngs for a given taxonomy term ID.
 *
 * @param $tid
 *   (optional) Taxonomy term ID of the forum_ng. If not given all forum_ngs will be
 *   returned.
 *
 * @return
 *   A tree of taxonomy objects, with the following additional properties:
 *   - num_topics: Number of topics in the forum_ng.
 *   - num_posts: Total number of posts in all topics.
 *   - last_post: Most recent post for the forum_ng.
 *   - forum_ngs: An array of child forum_ngs.
 */
function forum_ng_forum_load($tid = NULL) {
  $cache = &backdrop_static(__FUNCTION__, array());
  $cache = array();

  // Return a cached forum_ng tree if available.
  if (!isset($tid)) {
    $tid = 0;
  }
  if (isset($cache[$tid])) {
    return $cache[$tid];
  }

  $vocabulary_name = config_get('forum_ng.settings', 'forum_ng_nav_vocabulary');

  // Load and validate the parent term.
  if ($tid) {
    $forum_ng_term = taxonomy_term_load($tid);

    if (!$forum_ng_term || ($forum_ng_term->vocabulary != $vocabulary_name)) {
      return $cache[$tid] = FALSE;
    }
  }
  // If $tid is 0, create an empty object to hold the child terms.
  elseif ($tid === 0) {
    $forum_ng_term = (object) array(
      'tid' => 0,
    );
  }

  // Load parent terms.
  $forum_ng_term->parents = taxonomy_term_load_parents_all($forum_ng_term->tid);
  // Load the tree below.
  $forum_ngs = array();
  $_forum_ngs = taxonomy_get_tree($vocabulary_name, $tid);

  if (count($_forum_ngs)) {
    $query = db_select('node', 'n');
    $query->join('node_comment_statistics', 'ncs', 'n.nid = ncs.nid');
    $query->join('forum_ng', 'f', 'n.vid = f.vid');
    $query->addExpression('COUNT(n.nid)', 'topic_count');
    $query->addExpression('SUM(ncs.comment_count)', 'comment_count');
    $counts = $query
      ->fields('f', array('tid'))
      ->condition('n.status', 1)
      ->groupBy('tid')
      ->addTag('node_access')
      ->execute()
      ->fetchAllAssoc('tid');
  }

  foreach ($_forum_ngs as $forum_ng) {
    // Merge in the topic and post counters.
    if (!empty($counts[$forum_ng->tid])) {
      $forum_ng->num_topics = $counts[$forum_ng->tid]->topic_count;
      $forum_ng->num_posts = $counts[$forum_ng->tid]->topic_count + $counts[$forum_ng->tid]->comment_count;
    }
    else {
      $forum_ng->num_topics = 0;
      $forum_ng->num_posts = 0;
    }

    // Query "Last Post" information for this forum_ng.
    $query = db_select('node', 'n');
    $query->join('users', 'u1', 'n.uid = u1.uid');
    $query->join('forum_ng', 'f', 'n.vid = f.vid AND f.tid = :tid', array(':tid' => $forum_ng->tid));
    $query->join('node_comment_statistics', 'ncs', 'n.nid = ncs.nid');
    $query->join('users', 'u2', 'ncs.last_comment_uid = u2.uid');
    $query->addExpression('CASE ncs.last_comment_uid WHEN 0 THEN ncs.last_comment_name ELSE u2.name END', 'last_comment_name');

    $topic = $query
      ->fields('ncs', array('last_comment_timestamp', 'last_comment_uid'))
      ->condition('n.status', 1)
      ->orderBy('last_comment_timestamp', 'DESC')
      ->range(0, 1)
      ->addTag('node_access')
      ->execute()
      ->fetchObject();

    // Merge in the "Last Post" information.
    $last_post = new stdClass();
    if (!empty($topic->last_comment_timestamp)) {
      $last_post->created = $topic->last_comment_timestamp;
      $last_post->name = $topic->last_comment_name;
      $last_post->uid = $topic->last_comment_uid;
    }
    $forum_ng->last_post = $last_post;

    $forum_ngs[$forum_ng->tid] = $forum_ng;
  }

  // Cache the result, and return the tree.
  $forum_ng_term->forums = $forum_ngs;

  $cache[$tid] = $forum_ng_term;
  return $forum_ng_term;
}

/**
 * Calculates the number of new posts in a forum_ng that the user has not yet read.
 *
 * Nodes are new if they are newer than NODE_NEW_LIMIT.
 *
 * @param $term
 *   The term ID of the forum_ng.
 * @param $uid
 *   The user ID.
 *
 * @return
 *   The number of new posts in the forum_ng that have not been read by the user.
 */
function _forum_ng_topics_unread($term, $uid) {
  $query = db_select('node', 'n');
  $query->join('forum_ng', 'f', 'n.vid = f.vid AND f.tid = :tid', array(':tid' => $term));
  $query->leftJoin('history', 'h', 'n.nid = h.nid AND h.uid = :uid', array(':uid' => $uid));
  $query->addExpression('COUNT(n.nid)', 'count');
  return $query
    ->condition('status', 1)
    ->condition('n.created', NODE_NEW_LIMIT, '>')
    ->isNull('h.nid')
    ->addTag('node_access')
    ->execute()
    ->fetchField();
}

/**
 * Gets all the topics in a forum_ng.
 *
 * @param $tid
 *   The term ID of the forum_ng.
 * @param $sortby
 *   One of the following integers indicating the sort criteria:
 *   - 1: Date - newest first.
 *   - 2: Date - oldest first.
 *   - 3: Posts with the most comments first.
 *   - 4: Posts with the least comments first.
 * @param $forum_ng_per_page
 *   The maximum number of topics to display per page.
 *
 * @return
 *   A list of all the topics in a forum_ng.
 */
function forum_ng_get_topics($tid, $nid = NULL) {
  global $user;


  $query = db_select('forum_index', 'f');
  $query->fields('f');
  $query
    ->condition('f.tid', $tid)
    ->addTag('node_access');

  $result = $query->execute();
  $nids = array();
  foreach ($result as $record) {
    $nids[] = $record->nid;
  }
  if ($nids) {
    $query = db_select('node', 'n');
    $query->fields('n', array('title', 'nid', 'type', 'sticky', 'created', 'uid'));
    $query->addField('n', 'comment', 'comment_mode');

    $query->join('node_comment_statistics', 'ncs', 'n.nid = ncs.nid');
    $query->fields('ncs', array('cid', 'last_comment_uid', 'last_comment_timestamp', 'comment_count'));

    $query->join('forum_index', 'f', 'f.nid = ncs.nid');
    $query->addField('f', 'tid', 'forum_ng_tid');

    $query->join('forum_ng', 'm', 'm.nid = ncs.nid');
    $query->addField('m', 'tid', 'forum_ng_current_tid');

    $query->join('users', 'u', 'n.uid = u.uid');
    $query->addField('u', 'name');

    $query->join('users', 'u2', 'ncs.last_comment_uid = u2.uid');

    $query->addExpression('CASE ncs.last_comment_uid WHEN 0 THEN ncs.last_comment_name ELSE u2.name END', 'last_comment_name');

    $query->condition('n.nid', $nids);

    $result = $query->execute();
  }
  else {
    $result = array();
  }

  $topics = array();
  $first_new_found = FALSE;
  foreach ($result as $topic) {
    if ($user->uid) {
      // A forum_ng is new if the topic is new, or if there are new comments since
      // the user's last visit.
      if ($topic->forum_ng_current_tid != $tid) {
        $topic->new = 0;
      }
      else {
        $history = _forum_ng_user_last_visit($topic->nid);
        $topic->new_replies = comment_num_new($topic->nid, $history);
        $topic->new = $topic->new_replies || ($topic->last_comment_timestamp > $history);
      }
    }
    else {
      // Do not track "new replies" status for topics if the user is anonymous.
      $topic->new_replies = 0;
      $topic->new = 0;
    }

    // Make sure only one topic is indicated as the first new topic.
    $topic->first_new = FALSE;
    if ($topic->new != 0 && !$first_new_found) {
      $topic->first_new = TRUE;
      $first_new_found = TRUE;
    }

    if ($topic->comment_count > 0) {
      $last_reply = new stdClass();
      $last_reply->created = $topic->last_comment_timestamp;
      $last_reply->name = $topic->last_comment_name;
      $last_reply->uid = $topic->last_comment_uid;
      $topic->last_reply = $last_reply;
    }
    // Store all the forum_ngs where this topic is listed. This is written with the
    // understanding that the topic can be in more than two places, otherwise
    // dont need the array. Will need to check.
    $topic->forum_ng_tids[] = $topic->forum_ng_tid;
    if (isset($topics[$topic->nid]->forum_ng_tids)) {
      $topic->forum_ng_tids = array_merge($topic->forum_ng_tids, $topics[$topic->nid]->forum_ng_tids);
    }
    $topics[$topic->nid] = $topic;
  }

  return $nid ? (isset($topics[$nid]) ? $topics[$nid] : NULL) : $topics;
}

/**
 * Gets the last time the user viewed a node.
 *
 * @param $nid
 *   The node ID.
 *
 * @return
 *   The timestamp when the user last viewed this node, if the user has
 *   previously viewed the node; otherwise NODE_NEW_LIMIT.
 */
function _forum_ng_user_last_visit($nid) {
  global $user;
  $history = &backdrop_static(__FUNCTION__, array());

  if (empty($history)) {
    $result = db_query('SELECT nid, timestamp FROM {history} WHERE uid = :uid', array(':uid' => $user->uid));
    foreach ($result as $t) {
      $history[$t->nid] = $t->timestamp > NODE_NEW_LIMIT ? $t->timestamp : NODE_NEW_LIMIT;
    }
  }
  return isset($history[$nid]) ? $history[$nid] : NODE_NEW_LIMIT;
}

/**
 * Gets topic sorting information based on an integer code.
 *
 * @param $sortby
 *   One of the following integers indicating the sort criteria:
 *   - 1: Date - newest first.
 *   - 2: Date - oldest first.
 *   - 3: Posts with the most comments first.
 *   - 4: Posts with the least comments first.
 *
 * @return
 *   An array with the following values:
 *   - field: A field for an SQL query.
 *   - sort: 'asc' or 'desc'.
 */
function _forum_ng_get_topic_order($sortby) {
  switch ($sortby) {
    case 1:
      return array('field' => 'f.last_comment_timestamp', 'sort' => 'desc');
      break;
    case 2:
      return array('field' => 'f.last_comment_timestamp', 'sort' => 'asc');
      break;
    case 3:
      return array('field' => 'f.comment_count', 'sort' => 'desc');
      break;
    case 4:
      return array('field' => 'f.comment_count', 'sort' => 'asc');
      break;
  }
}

/**
 * Updates the taxonomy index for a given node.
 *
 * @param $nid
 *   The ID of the node to update.
 */
function _forum_ng_update_forum_index($nid) {
  $count = db_query('SELECT COUNT(cid) FROM {comment} c INNER JOIN {forum_index} i ON c.nid = i.nid WHERE c.nid = :nid AND c.status = :status', array(
    ':nid' => $nid,
    ':status' => COMMENT_PUBLISHED,
  ))->fetchField();

  if ($count > 0) {
    // Comments exist.
    $last_reply = db_query_range('SELECT cid, name, created, uid FROM {comment} WHERE nid = :nid AND status = :status ORDER BY cid DESC', 0, 1, array(
      ':nid' => $nid,
      ':status' => COMMENT_PUBLISHED,
    ))->fetchObject();
    db_update('forum_index')
      ->fields( array(
        'comment_count' => $count,
        'last_comment_timestamp' => $last_reply->created,
      ))
      ->condition('nid', $nid)
      ->execute();
  }
  else {
    // Comments do not exist.
    $node = db_query('SELECT uid, created FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchObject();
    db_update('forum_index')
      ->fields( array(
        'comment_count' => 0,
        'last_comment_timestamp' => $node->created,
      ))
      ->condition('nid', $nid)
      ->execute();
  }
}

/**
 * Implements hook_rdf_mapping().
 */
function forum_ng_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'forum_ng',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:BoardPost'),
        'forum_ng_taxonomy' => array(
          'type' => 'rel',
        ),
      ),
    ),
    array(
      'type' => 'taxonomy_term',
      'bundle' => 'forum_ngs',
      'mapping' => array(
        'rdftype' => array('sioc:forum_ng'),
      ),
    ),
  );
}

/**
 * Implements hook_autoload_info().
 */
function forum_ng_autoload_info() {
  return array(
    'taxonomy_term_data_handler_field_last_reply' => 'views/taxonomy_term_data_handler_field_last_reply.inc',
    'taxonomy_term_data_handler_field_posts' => 'views/taxonomy_term_data_handler_field_posts.inc',
    'taxonomy_term_data_handler_field_topics' => 'views/taxonomy_term_data_handler_field_topics.inc',
  );
}

/**
 * Implements hook_views_api().
 */
function forum_ng_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'forum_ng') . '/views',
  );
}

/**
 * Implements hook_config_info().
 */
function forum_ng_config_info() {
  $prefixes['forum_ng.settings'] = array(
    'label' => t('forum_ng settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}


/**
 * Preprocesses variables for forum_ng-submitted.tpl.php.
 *
 * The submission information will be displayed in the forum_ng list and topic
 * list.
 *
 * @param $variables
 *   An array containing the following elements:
 *   - topic: The topic object.
 *
 * @see forum_ng-submitted.tpl.php
 * @see theme_forum_ng_submitted()
 */
function template_preprocess_forum_ng_submitted(&$variables) {
  $variables['author'] = isset($variables['topic']->uid) ? theme('username', array('account' => $variables['topic'])) : '';
  $variables['time'] = isset($variables['topic']->created) ? format_interval(REQUEST_TIME - $variables['topic']->created) : '';
}

/**
 * Preprocesses variables for forum_ng-icon.tpl.php.
 *
 * @param $variables
 *   An array containing the following elements:
 *   - new_posts: Indicates whether or not the topic contains new posts.
 *   - num_posts: The total number of posts in all topics.
 *   - comment_mode: An integer indicating whether comments are open, closed,
 *     or hidden.
 *   - sticky: Indicates whether the topic is sticky.
 *   - first_new: Indicates whether this is the first topic with new posts.
 *
 * @see forum_ng-icon.tpl.php
 * @see theme_forum_ng_icon()
 */
function template_preprocess_forum_ng_icon(&$variables) {
  $variables['hot_threshold'] = config_get('forum_ng.settings', 'forum_ng_hot_topic');
  if ($variables['num_posts'] > $variables['hot_threshold']) {
    $variables['icon_class'] = $variables['new_posts'] ? 'hot-new' : 'hot';
    $variables['icon_title'] = $variables['new_posts'] ? t('Hot topic, new comments') : t('Hot topic');
  }
  else {
    $variables['icon_class'] = $variables['new_posts'] ? 'new' : 'default';
    $variables['icon_title'] = $variables['new_posts'] ? t('New comments') : t('Normal topic');
  }

  if ($variables['comment_mode'] == COMMENT_NODE_CLOSED || $variables['comment_mode'] == COMMENT_NODE_HIDDEN) {
    $variables['icon_class'] = 'closed';
    $variables['icon_title'] = t('Closed topic');
  }

  if ($variables['sticky'] == 1) {
    $variables['icon_class'] = 'sticky';
    $variables['icon_title'] = t('Sticky topic');
  }
}

/**
 * Preprocesses variables for views fields.
 */
function forum_ng_preprocess_views_view_field(&$variables) {
  if ($variables['view']->name == 'topic' && $variables['field']->field_alias == 'node_title') {
    $tid = $variables['view']->argument['tid']->argument;
    $topic = forum_ng_get_topics($tid, $variables['row']->nid);
    if ($topic->forum_ng_current_tid != $tid) {
      $term = taxonomy_term_load($topic->forum_ng_current_tid);
      $name = $term->name;
      $variables['topic_moved'] = t('(topic moved to !new_location)', array('!new_location' => l($name, 'forums/' . $topic->forum_ng_current_tid)));
    }
    $variables['topic_icon'] = theme('forum_ng_icon', array('new_posts' => $topic->new, 'num_posts' => $topic->comment_count, 'comment_mode' => $topic->comment_mode, 'sticky' => $topic->sticky, 'first_new' => $topic->first_new));
  }

  if ($variables['view']->name == 'forum_ngs' && $variables['field']->field_alias == 'taxonomy_term_data_name') {
    global $user;
    if (_forum_ng_topics_unread($variables['row']->tid, $user->uid)) {
      $variables['icon_class'] = 'new';
      $variables['icon_title'] = t('New posts');
    }
    else {
      $variables['icon_class'] = 'default';
      $variables['icon_title'] = t('No new posts');
    }
  }
}

/**
 * Preprocesses variables for forum_ng list.
 */
function forum_ng_preprocess_views_view__forum_ngs(&$variables) {
  foreach ($variables['rows'] as $row_count => $row) {
    $tid = $variables['result'][$row_count]->tid;
    if (taxonomy_term_load_children($tid, 'forum_ngs')) {
      $variables['row_classes'][$row_count][] = 'parent-row';
    }
    $indent = count(taxonomy_term_load_parents_all($tid)) - 1;
    if ($indent) {
      $variables['row_classes'][$row_count][] = 'child-row child-' . $indent;
    }
    else {
      $variables['row_classes'][$row_count][] = 'root-row';
    }
    $variables['indent'][$row_count] = $indent;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function forum_ng_views_pre_render(&$view) {
  if ($view->name == 'forum_ng_topic') {
    $parents = taxonomy_term_load_parents_all($view->args[0]);
    unset($parents[0]);
    $parents = array_reverse($parents);

    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Forums'), 'forums');
    if ($parents) {
      foreach ($parents as $parent) {
        $breadcrumb[] = l($parent->name, 'forums/' . $parent->tid);
      }
    }
    backdrop_set_breadcrumb($breadcrumb);
  }
}
